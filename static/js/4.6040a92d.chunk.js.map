{"version":3,"sources":["HowMuch.js","HowMuch.module.css"],"names":["round","value","places","Number","Math","parseFloat","toFixed","replace","custom_computer","HowMuch","props","state","computer","place","pue","count","time","percent","times","item","this","setState","c","power","tflops","cores","acores","isCustomComputer","homes","getPlace","scale","getComputer","p","calculatePower","unit","s","num_homes","getPlacePower","kWh","_calculateKWH","co2","_calculateCO2","km","className","styles","result","startsWith","indexOf","the","placeHasThe","i","length","push","label","keys","Object","sort","computers","grouped","year","years","options","kwatt","calculateKW","domestic","calculateDomestic","details","cpower","nowrap","min","max","step","onChange","slotCustomPower","slotCustomTFLOPs","slotCustomCores","slotCustomACores","is_calculated","container","selectComputer","slotSelectComputer","slotChangePUE","selectPlace","slotSelectPlace","calculateNumHomes","slotChangeCount","selectUnit","slotChangeTime","slotChangePercent","calculateKWh","calculateCO2","calculateAirKm","calculateLonNY","sources","href","React","Component","module","exports"],"mappings":"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","file":"static/js/4.6040a92d.chunk.js","sourcesContent":["import React from 'react';\n\nimport NumericInput from 'react-numeric-input';\nimport Select from 'react-select';\n\nimport styles from './HowMuch.module.css';\n\nimport power from './power.json';\nimport homes from './homes.json';\n\n/* This is a very simple react webapp that has been put together in 2 days\n   to help researchers compare the amount of electricity used by their\n   supercomputing jobs to the amount of electricity used in their\n   domestic lives.\n\n   (C) Christopher Woods, University of Bristol, 2020\n\n   Released under the MIT license\n*/\n\nfunction round(value, places=2){\n  return Number(Math.round(parseFloat(value + 'e' + places))\n                 + 'e-' + places).toFixed(places).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nlet custom_computer = \"A custom supercomputer\";\n\n// conversion factors for energy to CO2 equivalent - taken from official\n// UK government 2019 figures used by businesses to report their\n// CO2 (https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2019)\nlet kwh_to_c02 = 0.2556; // kg CO2e per kWh\nlet air_km_to_c02 = 0.14981; // kg CO2e - long haul, economy to/from UK, includes\n                             // radiative forcing, kg CO2e per km travelled\n\nlet nw_to_lon = 5567; // distance in km from New York to London for a flight\n                      // according to Google\n\nclass HowMuch extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {computer: custom_computer,\n                  place: \"United Kingdom\",\n                  pue: 1.2,\n                  count: 1.0,\n                  time: 0,\n                  percent: 100,\n                  times: [[\"hour\", 1],\n                          [\"day\", 24],\n                          [\"week\", 24*7],\n                          [\"month\", 24*30],\n                          [\"year\", 24*365]],\n                  custom_computer: {\"power\": 1000.0,\n                                    \"tflops\": 1000,\n                                    \"cores\": 50000,\n                                    \"acores\": 0,\n                                   }\n                 };\n  }\n\n  slotSelectComputer(item){\n    this.setState({\"computer\": item});\n  }\n\n  slotSelectPlace(item){\n    this.setState({\"place\": item});\n  }\n\n  slotChangePercent(value){\n    if (value < 0.1){\n      value = 0.1;\n    }\n    else if (value > 100){\n      value = 100;\n    }\n\n    this.setState({\"percent\": value});\n  }\n\n  slotChangePUE(value){\n    if (value < 1.0){\n      value = 1.0;\n    }\n    else if (value > 2.0){\n      value = 2.0;\n    }\n\n    this.setState({\"pue\": value});\n  }\n\n  slotChangeCount(value){\n    if (value < 0.1){\n      value = 0.1;\n    }\n    else if (value > 100){\n      value = 100;\n    }\n\n    this.setState({\"count\": value});\n  }\n\n  slotChangeTime(value){\n    if (value < 0){\n      value = 0;\n    }\n    else if (value >= this.state.times.count){\n      value = this.state.times.count - 1;\n    }\n\n    this.setState({\"time\": value});\n  }\n\n  slotCustomPower(value){\n    if (value < 0.1){\n      value = 0.1;\n    }\n    else if (value > 50){\n      value = 50.0;\n    }\n\n    let c = {...this.state.custom_computer};\n\n    c.power = 1000 * value;\n\n    this.setState({custom_computer: c});\n  }\n\n  slotCustomTFLOPs(value){\n    if (value < 1){\n      value = 1;\n    }\n    else if (value > 1000000){\n      value = 1000000.0;\n    }\n\n    let c = {...this.state.custom_computer};\n\n    c.tflops = value;\n\n    this.setState({custom_computer: c});\n  }\n\n  slotCustomCores(value){\n    if (value < 1){\n      value = 1;\n    }\n    else if (value > 1000000){\n      value = 1000000.0;\n    }\n\n    let c = {...this.state.custom_computer};\n\n    c.cores = value;\n\n    this.setState({custom_computer: c});\n  }\n\n  slotCustomACores(value){\n    if (value < 1){\n      value = 1;\n    }\n    else if (value > 1000000){\n      value = 1000000.0;\n    }\n\n    let c = {...this.state.custom_computer};\n\n    c.acores = value;\n\n    this.setState({custom_computer: c});\n  }\n\n  getComputer(){\n    if (this.isCustomComputer()){\n      return this.state.custom_computer;\n    }\n    else {\n      return power[this.state.computer];\n    }\n  }\n\n  isCustomComputer(){\n    return this.state.computer === custom_computer;\n  }\n\n  getPlace(){\n    return homes[this.state.place];\n  }\n\n  getPlacePower(){\n    let kWhYear = this.getPlace();\n    return kWhYear / (365*24);\n  }\n\n  calculatePower(scale=true){\n    let computer = this.getComputer();\n    let p = computer.power;\n\n    if (scale){\n      p = this.state.percent * p / 100.0;\n    }\n\n    return p * this.state.pue;\n  }\n\n  calculateKW(){\n    let p = this.calculatePower();\n\n    let unit = \"kilowatt\";\n\n    if (p > 1000){\n      p /= 1000;\n      unit = \"megawatt\";\n    }\n\n    let s = \"s\";\n\n    if (p === 1.0){\n      s = \"\";\n    }\n\n    return `${round(p,3)} ${unit}${s}`;\n  }\n\n  calculateNumHomes(scale=true){\n    let num_homes = this.calculatePower(scale) / this.getPlacePower();\n\n    if (num_homes <= 1){\n      return `${round(num_homes, 0)} home`;\n    }\n    else{\n      return `${round(num_homes, 0)} homes`;\n    }\n  }\n\n  _calculateKWH(scale=true){\n    let time = this.state.times[this.state.time][1] * this.state.count;\n    let kWh = this.calculatePower(scale) * time;\n    return kWh;\n  }\n\n  calculateDomestic(scale=true){\n    let kWh = this._calculateKWH(scale);\n    let time = kWh / this.getPlacePower();\n\n    let unit = \"hour\";\n    let s = \"s\";\n\n    if (time > (365*24)){\n      time /= (365*24);\n      unit = \"year\";\n    }\n    else if (time > (30*24)){\n      time /= (30*24);\n      unit = \"month\";\n    }\n    else if (time > (7*24)){\n      time /= (7*24);\n      unit = \"week\";\n    }\n    else if (time > 24){\n      time /= 24;\n      unit = \"day\";\n    }\n\n    time = round(time, 1);\n\n    if (time === \"1.0\"){\n      s = \"\";\n    }\n\n    return `${time} ${unit}${s}`;\n  }\n\n  calculateKWh(scale=true){\n    let kWh = this._calculateKWH(scale);\n    return `${round(kWh,0)} kWh`;\n  }\n\n  _calculateCO2(scale=true){\n    let kWh = this._calculateKWH(scale);\n    return kWh * kwh_to_c02;\n  }\n\n  calculateCO2(scale=true){\n    let co2 = this._calculateCO2(scale);\n\n    if (co2 < 1){\n      return `${round(co2/1000,3)} g`;\n    }\n    else if (co2 < 10){\n      return `${round(co2, 1)} kg`;\n    }\n    else if (co2 > 100000){\n      return `${round(co2/1000, 0)} tonnes`;\n    }\n    else if (co2 > 2000){\n      return `${round(co2/1000, 1)} tonnes`;\n    }\n    else{\n      return `${round(co2,0)} kg`;\n    }\n  }\n\n  calculateAirKm(scale=true){\n    let co2 = this._calculateCO2(scale);\n    let km = co2 / air_km_to_c02;\n\n    return `${round(km,0)} km`;\n  }\n\n  calculateLonNY(scale=true){\n    let co2 = this._calculateCO2(scale);\n    let km = co2 / air_km_to_c02;\n\n    if (km > nw_to_lon){\n      let times = km / nw_to_lon;\n\n      if (times > 20){\n        times = round(times, 0);\n      }\n      else{\n        times = round(times, 1);\n      }\n\n      return <span>&nbsp;This is <span className={styles.result}>{times}</span> times the\n               distance from London to New York!\n             </span>\n    }\n  }\n\n  placeHasThe(){\n    let p = this.state.place;\n\n    if (p.startsWith(\"United\")){\n      return true;\n    }\n    else if ([\"Netherlands\", \"European Union\", \"World\"].indexOf(p) >= 0){\n      return true\n    }\n\n    return false;\n  }\n\n  render(){\n    let s = \"s\";\n\n    if (this.state.count === 1.0){\n      s = \"\";\n    }\n\n    let the = \"\";\n\n    if (this.placeHasThe()){\n      the = \"the\";\n    }\n\n    let time = null;\n    let times = [];\n    for (let i=0; i<this.state.times.length; ++i){\n      times.push({value:i, label:`${this.state.times[i][0]}${s}`});\n\n      if (this.state.time === i){\n        time = times[i];\n      }\n    }\n\n    let place = null;\n    let places = [];\n    let keys = Object.keys(homes);\n    keys.sort();\n\n    for (let i=0; i<keys.length; ++i){\n      places.push({value:keys[i], label:keys[i]});\n\n      if (this.state.place === keys[i]){\n        place = places[i];\n      }\n    }\n\n    let computer = null;\n    let computers = [{value:custom_computer, label:custom_computer}];\n    keys = Object.keys(power);\n    keys.sort();\n\n    let grouped = {};\n\n    for (let i=0; i<keys.length; ++i){\n      let c = {value:keys[i], label:keys[i]};\n\n      let year = power[keys[i]].year;\n\n      if (!grouped[year]){\n        grouped[year] = [];\n      }\n\n      grouped[year].push(c);\n\n      if (this.state.computer === keys[i]){\n        computer = c;\n      }\n    }\n\n    let years = Object.keys(grouped);\n    years.sort();\n\n    for (let i=years.length-1; i>=0; --i){\n      let year = years[i];\n\n      computers.push({label:year, options:grouped[year]});\n    }\n\n    if (this.isCustomComputer()){\n      computer = {value:custom_computer, label:custom_computer};\n    }\n\n    let kwatt = this.calculateKW();\n    let domestic = this.calculateDomestic();\n\n    let details = null;\n    let cores = null;\n    let acores = null;\n    let cpower = null;\n\n    if (this.isCustomComputer()){\n      let c = this.state.custom_computer;\n      cores = c.cores;\n      acores = c.acores;\n      cpower = c.power;\n\n      let unit = \"megawatts\";\n\n      if (c.power === 1000){\n        unit = \"megawatt\";\n      }\n\n      details = <span className={styles.details}>\n                  consumes&nbsp;\n                  <span className={styles.nowrap}>\n                  <NumericInput min={0.1} max={50.0} value={c.power/1000}\n                                step={0.5}\n                                onChange={(value)=>{this.slotCustomPower(value)}}/>&nbsp;\n                  {unit}</span>, and runs at an Rmax speed of&nbsp;\n                  <span className={styles.nowrap}>\n                  <NumericInput min={1} max={1000000} value={c.tflops}\n                                step={100}\n                                onChange={(value)=>{this.slotCustomTFLOPs(value)}}/>&nbsp;\n                  TFLOPs</span>. This is an efficiency of {round(c.tflops/c.power, 1)} GFLOPs/Watt.\n                  It contains&nbsp;\n                  <span className={styles.nowrap}>\n                  <NumericInput min={1} max={1000000} value={c.cores}\n                                step={100}\n                                onChange={(value)=>{this.slotCustomCores(value)}}/>&nbsp;\n                  cores</span> and&nbsp;\n                  <span className={styles.nowrap}>\n                  <NumericInput min={1} max={1000000} value={c.acores}\n                                step={100}\n                                onChange={(value)=>{this.slotCustomACores(value)}}/>&nbsp;\n                  accelerator</span> cores.\n                </span>\n    }\n    else{\n      let c = this.getComputer();\n      cores = c.cores;\n      acores = c.acores;\n      cpower = c.power;\n\n      if (c.is_calculated){\n        details = <span className={styles.details}>\n                    is estimated to consume <span className={styles.nowrap}>{round(c.power/1000, 3)} megawatts</span> (based\n                    on the average efficiency of <span className={styles.nowrap}>{round(c.tflops/c.power, 1)} GFLOPs / Watt</span> of\n                    its year, and a reported RMax speed of <span className={styles.nowrap}>{c.tflops} TFLOPs</span> in {c.year}).\n                  </span>\n      }\n      else{\n        details = <span className={styles.details}>\n                    was reported in {c.year} to consume <span className={styles.nowrap}>{round(c.power/1000, 3)} megawatts</span> to achieve a reported\n                    RMax speed of <span className={styles.nowrap}>{c.tflops} TFLOPs</span> (an efficiency\n                    of <span className={styles.nowrap}>{round(c.tflops/c.power,1)} GFLOPs / Watt</span>).\n                  </span>\n      }\n    }\n\n    return <div className={styles.container}>\n             <div className=\"w3-panel w3-pale-green w3-leftbar w3-rightbar w3-border-green w3-padding-16\">\n              <div className={styles.selectComputer}>\n                <Select options={computers}\n                        value={computer}\n                        onChange={(item)=>{this.slotSelectComputer(item.value);}}/>\n              </div>&nbsp;\n              {details}&nbsp;\n              <span className={styles.computer}>\n                Assuming a PUE of&nbsp;\n                <NumericInput min={1.0} max={2.0} value={this.state.pue}\n                              step={0.1}\n                              onChange={(value)=>{this.slotChangePUE(value)}}/>&nbsp;\n                it will burn electricity at a rate\n                of <span className={styles.result}>\n                      {round(0.001 * cpower * this.state.pue, 3)} megawatts\n                   </span>.\n              </span>\n             </div>\n\n             <div className=\"w3-panel w3-pale-yellow w3-leftbar w3-rightbar w3-border-yellow w3-padding-16\">\n               Compared to the average domestic electricity consumption in {the}&nbsp;\n               <div className={styles.selectPlace}>\n                 <Select options={places}\n                         value={place}\n                         onChange={(item)=>{this.slotSelectPlace(item.value);}}/>\n               </div>,&nbsp;\n               this is the same as powering&nbsp;\n               <span className={styles.result}>\n                 {this.calculateNumHomes(false)}\n               </span>.\n             </div>\n\n             <div className=\"w3-panel w3-pale-red w3-leftbar w3-rightbar w3-border-red w3-padding-16\">\n               The electricity consumed to run a job for&nbsp;\n               <span className={styles.nowrap}>\n               <NumericInput min={0.0} max={100.0} value={this.state.count}\n                                step={1}\n                                onChange={(value)=>{this.slotChangeCount(value)}}/>\n               <span className={styles.selectUnit}>\n                 <Select options={times}\n                        value={time}\n                        onChange={(item)=>{this.slotChangeTime(item.value);}}/>\n               </span></span>,&nbsp;\n               that uses&nbsp;\n               <NumericInput min={0.1} max={100.0} value={this.state.percent}\n                            step={5}\n                            onChange={(value)=>{this.slotChangePercent(value)}}/>% of&nbsp;\n               this supercomputer (so {round(this.state.percent*cores/100.0, 0)} cores\n               and {round(this.state.percent*acores/100.0, 0)} accelerator cores,\n               consuming {kwatt} - equivalent to {this.calculateNumHomes(true)}) would power an average\n               home in {the} {this.state.place} for&nbsp;\n               <span className={styles.result}>{domestic}</span>.\n             </div>\n\n             <div className=\"w3-panel w3-light-gray w3-leftbar w3-rightbar w3-border-black w3-padding-16\">\n               This job will consume {this.calculateKWh(true)}. Generating this amount of electricity\n               in the UK would emit <span className={styles.result}>{this.calculateCO2(true)}</span> of\n               carbon dioxide (CO2 equivalent). This is the same amount as flying\n               long haul economy for <span className={styles.result}>{this.calculateAirKm(true)}</span>.\n               {this.calculateLonNY()}\n             </div>\n\n             <div className=\"w3-panel w3-pale-gray w3-leftbar w3-rightbar w3-border-light-gray w3-padding-16\">\n               <div className={styles.sources}>\n                 <ul className=\"w3-ul\">\n                  <li> The total electricity consumption of the average home\n                        in {the} {this.state.place} is {this.getPlace()} kWh per year, which\n                        is an average of {round(1000 * this.getPlace() / (365*24),0)} Watts.</li>\n                  <li>Supercomputer power information taken from the&nbsp;\n                      <a href=\"https://top500.org\">Top500</a></li>\n                  <li>Average domestic power consumption in 2014 taken from&nbsp;\n                      <a href=\"https://www.wec-indicators.enerdata.eu/household-electricity-use.html\">\n                        World Energy Forum figures\n                      </a>\n                  </li>\n                  <li>Average domestic energy consumption in UK in 2019 taken from&nbsp;\n                      <a href=\"https://www.ovoenergy.com/guides/energy-guides/how-much-electricity-does-a-home-use.html\">\n                        OVO Energy guides\n                      </a>\n                  </li>\n                  <li>\n                    Conversion of energy consumption to CO2 equivalent taken from\n                    the <a href=\"https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2019\">\n                      UK Government Greenhouse gas reporting conversion factors, 2019\n                    </a>. The conversion figure used is {kwh_to_c02} kg CO2 equivalent per kilowatt\n                    hour of electricity, which is the average for the UK grid. This is\n                    then related to air travel using {air_km_to_c02} kg CO2 equivalent per kilometer\n                    of air travel, assuming economy class long haul flights that start or end\n                    in the UK. The \"Radiative Forcing\" (RF) equivalent is used, as this\n                    accounts for the additional impact of aviation, e.g. emissions of\n                    nitrous oxides and water vapour at high altitude. This means that generating\n                    1 kWh in the UK generates the same CO2 equivalent as {round(kwh_to_c02 / air_km_to_c02,2)} km\n                    of air travel\n                  </li>\n                  <li>\n                    The air travel distance from London to New York\n                    is, <a href=\"https://www.google.com/search?q=distance+london+to+new+york+in+km&oq=distance+london+to+new+york+in+km\">according to Google</a>,\n                    {nw_to_lon} km\n                  </li>\n                  <li>The PUE is the \"power utilisation efficiency\", and relates the\n                      electricity consumed by a data center to the actual electricity\n                      consumed by the computers in the date center. The PUE will always\n                      be greater than 1.0 as some electricity is needed to power cooling,\n                      lighting, security etc. According\n                      to <a href=\"https://journal.uptimeinstitute.com/is-pue-actually-going-up/\">\n                        this paper\n                      </a> the average PUE is about 1.6. You\n                      can <a href=\"https://www.42u.com/measurement/pue-dcie.htm\">calculate PUEs here</a>. This\n                      suggests that the average PUE is about 2.0, while 1.2 represents a \"very efficient\" data center.\n                  </li>\n                  <li>\n                    All information is presented in good faith based on values reported in\n                    the above sources. The rationale for any estimated power consumptions\n                    of supercomputers is given (essentially the median computational efficiency\n                    for the Top500 for the year the supercomputer is last published, multiplied\n                    by the reported Rmax value). If you want to correct any information or have\n                    any questions then\n                    please <a href=\"https://github.com/chryswoods/howmuchisenough\">lodge an issue</a> and\n                    we will do our best to respond.\n                  </li>\n                  <li>\n                    Note that the data is based on power consumption of the supercomputer during\n                    the <a href=\"https://www.top500.org/project/linpack/\">LINPACK</a> run used for\n                    its Top500 submission (the way this is measured\n                    is <a href=\"https://www.top500.org/green500/\">described on the Green500 site).</a> This\n                    is for illustration only,\n                    and is not going to be exactly equal to the day-to-day power consumption of\n                    the supercomputer, as this will vary with the type of workload. However, it\n                    is useful to help illustrate a comparison to domestic energy consumption. It\n                    is hoped that this will encourage researchers to think carefully about the\n                    electricity costs of their supercomputer jobs. They would then take the time and\n                    effort needed to plan their experiments and optimise their codes so that\n                    they use the minimum electricity in the most efficient way possible.\n                  </li>\n                </ul>\n               </div>\n             </div>\n           </div>;\n  }\n};\n\nexport default HowMuch;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HowMuch_container__3avOH\",\"selectComputer\":\"HowMuch_selectComputer__2Rhv9\",\"selectPlace\":\"HowMuch_selectPlace__2dDPu\",\"selectUnit\":\"HowMuch_selectUnit__2bItn\",\"result\":\"HowMuch_result__3G6GH\",\"nowrap\":\"HowMuch_nowrap__lIyjm\",\"sources\":\"HowMuch_sources__13dtw\"};"],"sourceRoot":""}